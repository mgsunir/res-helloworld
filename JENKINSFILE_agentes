// principal: main alltests
// windows1 : alltests dev agente_jenkins1 windows
// Windows2 : alltests dev agente_jenkins2 windows

def repo = "https://github.com/mgsunir/res-helloworld.git"

def executeBasicShellCmds(def Stagge){
    println(" Comenzando y estamos en:" + Stagge +"[ ${WORKSPACE} ] y JOB [ ${JOB_NAME} ] YY NODO:  [ ${NODE_NAME} ]")    
    bat 'whoami && hostname'
    pwd()
    bat 'dir /B'
    
}
pipeline {
    agent none

    stages {
      
       stage('CleanUp Workspace'){   
            agent {label "main"}
            steps {
                executeBasicShellCmds('CleanUp Workspace')    
                deleteDir()
                echo "Workspace cleaned"
            }
        }
        stage('Get Code') {
            agent {label "main"}
            steps {
                executeBasicShellCmds('Get Code')
                // println("Unit GetCode, Comenzando y estamos en: [ ${WORKSPACE} ] y JOB [ ${JOB_NAME} ] YY NODO:  [ ${NODE_NAME} ]")                
                // bat 'whoami && hostname'
                // pwd()
        
                git "${repo}"
                bat 'dir'
                echo "WORKSPACE: ${env.WORKSPACE}"
                
                // HAY QUE STASHEAR EL result-unit
                stash includes: 'app/**', name: 'app'
                stash includes: 'test/**', name: 'test'
                
            }
        }
        // En Serie
        
        stage ('test') {
        parallel {
        stage('Unit') {
            agent {label "alltests"}
            steps {
                catchError(buildResult: 'UNSTABLE', stageResult: 'FAILURE') {
                     unstash 'app'
                     unstash 'test'
                    // echo "Comenzando en ${NODE_NAME} y el JOB es ${JOB_NAME}"
                    // println("Unit GetCode, Comenzando y estamos en: [ ${WORKSPACE} ] y JOB [ ${JOB_NAME} ] YY NODO:  [ ${NODE_NAME} ]")                
                    // bat 'whoami && hostname'
                    // pwd()
                    
                    
                    executeBasicShellCmds('Unit')

                    bat '''
                    set PYTHONPATH=%WORKSPACE%
                    c:\\Python312\\scripts\\pytest.exe test\\unit --junitxml=result-unit.xml
                    '''
                    junit 'result*.xml'
                }
            }
        }
        
        stage('rest') {
            agent {label "alltests"}
            steps {
                catchError(buildResult: 'UNSTABLE', stageResult: 'FAILURE',message: 'REST FAILURRE') {
                unstash 'app'
                unstash 'test'
                println("Stage rest, Comenzando y estamos en: [ ${WORKSPACE} ] y JOB [ ${JOB_NAME} ] YY NODO:  [ ${NODE_NAME} ]")
                executeBasicShellCmds('Rest')
                        
                        
                bat '''
                    set FLASK_APP=app\\api.py
                    echo "Arrancar Flash"
                    start c:\\Python312\\Scripts\\flask.exe run
                    echo "Flash Arrancado"
                    cd %WORKSPACE%
                    echo "Loop 4 wait"
                    :loop
                    curl http://localhost:5000 | find "Hello" 
                        if not  %errorlevel% equ 0 goto :loop
                        
                    cd \\Python312\\Scripts
                    
                    start C:\\"Program Files"\\jdk-21.0.5\\bin\\java.exe -jar c:\\Python312\\Scripts\\wiremock-standalone-3.10.0.jar --port 9090 C:\\Python312\\Scripts
                    
                    ping -n 6 127.0.0.1 > nul
                    echo "WireMock Arrancado"
                    cd %WORKSPACE%
                    c:\\Python312\\scripts\\pytest.exe test\\rest --junitxml=result-rest.xml
                    '''
            
                    }
                }
            }
        
        
        stage('Coverage') {
            agent {label "alltests"}
            steps {
                // println("Unit GetCode, Comenzando y estamos en: [ ${WORKSPACE} ] y JOB [ ${JOB_NAME} ] YY NODO:  [ ${NODE_NAME} ]")                
                // bat 'whoami && hostname'
                // pwd()
                executeBasicShellCmds('Coverage')
                unstash 'app'
                unstash 'test'


                script {
                    
                    bat 'c:\\Python312\\scripts\\coverage run --branch --source=app --omit=app\\_init.py,app\\api.py -m pytest test\\unit'
                    bat 'c:\\Python312\\scripts\\coverage xml'
                    
                    
                    catchError(buildResult: 'UNSTABLE', stageResult: 'FAILURE') {
                        cobertura coberturaReportFile: 'coverage.xml', 
                                  conditionalCoverageTargets: '100,0,80', 
                                  lineCoverageTargets: '100,0,90'
                    }
                }
            }
        }
        
        stage('Security'){
            agent {label "alltests"}
            steps{
                catchError(buildResult: 'UNSTABLE', stageResult: 'FAILURE'){
                    unstash 'app'
                    unstash 'test'
                    executeBasicShellCmds('Security')
                
                    
                    // Ejecutamos bandit para  pruebas de seguridad
                    bat 'c:\\Python312\\scripts\\bandit.exe --exit-zero -r . -f custom -o bandit.out --msg-template "{abspath}:{line}: {severity}: {test_id}: {msg}"'
                    
                    // Sacamos grafica con resultados
                    recordIssues tools: [pyLint(name: 'Bandit', pattern: 'bandit.out')], qualityGates: [[threshold: 2, type: 'TOTAL', unstable: true], [threshold: 4, type: 'TOTAL', unstable: false]]    
                                                                                                  
                }
            }
        }

        stage('Static') {
            agent {label "alltests"}
            steps {
                // println("Unit GetCode, Comenzando y estamos en: [ ${WORKSPACE} ] y JOB [ ${JOB_NAME} ] YY NODO:  [ ${NODE_NAME} ]")                
                // bat 'whoami && hostname'
                // pwd()
                executeBasicShellCmds('Static')
                unstash 'app'
                unstash 'test'
                script {
                    bat 'c:\\Python312\\scripts\\flake8.exe --exit-zero --format=pylint app >flake8.out'
                    recordIssues tools: [flake8(name: 'Flake8', pattern: 'flake8.out')], 
                                qualityGates: [[threshold: 10, type: 'TOTAL', unstable: true], 
                                               [threshold: 11, type: 'TOTAL', unstable: false]] 
                }
            }
        }
        
        }
        }
        
        // En Serie
        
        stage('Performance'){
            agent {label "alltests"}
            steps{
                catchError(buildResult: 'UNSTABLE', stageResult: 'FAILURE'){
                unstash 'app'
                unstash 'test'
                // println("Unit GetCode, Comenzando y estamos en: [ ${WORKSPACE} ] y JOB [ ${JOB_NAME} ] YY NODO:  [ ${NODE_NAME} ]")                
                // bat 'whoami && hostname'
                // pwd()
                executeBasicShellCmds('Performance')
                catchError(buildResult: 'UNSTABLE', stageResult: 'FAILURE'){
                    
                    bat '''
                        set FLASK_APP=app\\api.py
                        echo "Arrancar Flash"
                        start c:\\Python312\\Scripts\\flask.exe run
                        echo "Loop 4 wait"
                        :loop
                        curl http://localhost:5000 | find "Hello" 
                        if not  %errorlevel% equ 0 goto :loop
                        
                        c:\\apache-jmeter-5.6.3\\bin\\jmeter.bat -n -t %WORKSPACE%\\test\\jmeter\\flask.jmx -f -l flask.jtl
                        
                        
                    '''
                    }
                    // Ejecutamos el plugin performance para la visualizaci√≥n de los resultados
                    perfReport sourceDataFiles: 'flask.jtl'
                    // bat 'del /Q *.* '
                    // bat 'dir /B'
                    // bat 'del /S /Q *.* '
                    // bat 'dir /B'

                
            }
        }
    }
    
}
}


// java -jar c:\temp\jenkins-cli.jar -s http://localhost:8080/ -auth user:pass list-jobs
